
cat input | head -n1 
22 25 27 28 30 31 32 29

cat input | head -n1 | tr ' ' '\n' | interval
3
2
1
2
1
1
-3

# -k     (keep order of outputing jobs)
# --pipe (send stdin to each job)
# --tee  (send ALL stdin to each job)
# produces the biggest positive interval, biggest negative interval, and 0 if there is a 0 else 1
cat input | head -n1              | tr ' ' '\n' | interval | parallel -k --pipe --tee ::: "bound" "bound -l" "grep -x -m 1 0 || echo 1" | tr '\n' ' '
3 -3 1 

# run for each input line
cat input | parallel -k --pipe -N1 "tr ' ' '\n' | interval | parallel -k --pipe --tee ::: 'bound' 'bound -l' 'grep -x -m 1 0 || echo 1' | tr '\n' ' ' ; echo" > proc1
RAN

cat proc1 | head -n7 
3 -3 1 
3 0 0 
4 1 1 
5 2 1 
3 -1 1 
3 -3 1 
3 -3 0 
cat proc1 | awk '$3 ~ /0/ {next}; $1 > 3 || $2 < -3 || ($1 > 0 && $2 < 0) || ($1 < 0 && $2 > 0) {next}; {print "nice"}' | wc -l
639
GOLD STAR GET


### Part 2

###### THOUGHTS
It is simpler to deal with the changes between numbers than the numbers themselves, the "intervals"
Removing a number is equivalent to either removing the first or last interval, or replacing 2 agacent intervals with their sum

if a sequence contains more than one interval of the opposite sign then the sequence cannot be made good
a zero interval acts like a interval of the opposite sign as well, more than one of zeros and/or opposite signs means the sequence is doomed

an interval with an absolute value greater than 3 (in the middle) is also bad, but it can be fixed by combining it with an adjacent interval
this will only ever work if that interval is of the opposite sign from the normal. (e.g. -4 + 2 or 5 + -4)
This means that:
1) 2 faults can be fixed at once, if one of the faults is merely too large of a value. essentially, a size fault is of lower importance
2) a sequence with a magnitude fault in the middle cannot be fixed unless it also has a sign fault

an interval with an absolute value greater than 3 on the outside can be removed if there are no other issues with the sequence. otherwise the sequence is doomed.

These cases of good sequences need to be counted:
* Everything is fine already
* Increasing/Decreasing (without a size fault) but not strictly, there is one duplicate -> removing it makes this sequence good
* Increasing/Decreasing, with a single direction fault on the first xor last interval, no other intervals have size faults -> trimming that edge makes this sequence good
* A single directional fault (no duplicates/zero intervals also) which is not the first or last interval:
  *  if either of these 2 conditions are true, then the sequence is good:
  a) Remove the number after the directional fault -> there are no faults
  b) Remove the number before the directional fault -> there are no faults
The one I forgot!
* Increasing/Decreasing strictly with a single size fault on the first xor last interval

###### ========

cat input | head -n1 | awk '{print $0,NF}'
22 25 27 28 30 31 32 29 8

cat input | parallel -k --pipe -N1 "tr ' ' '\n' | interval | tr '\n' ' '; echo" > proc2
RAN

##### 3
# number of negatives
cat proc2 | parallel -k --pipe -N1 'grep -o "-" | wc -l' > proc3a
RAN

# length of interval sequence
cat proc2 | parallel -k --pipe -N1 -q awk '{print NF}' > proc3b
RAN

# number of 0s
cat proc2 | parallel -k --pipe -N1 'grep -o "\<0" | wc -l' > proc3c
RAN


##### 4
# whether or not the line has one negative (and no 0s)
paste proc3a proc3c | awk '$1==1 && $2==0 {print 1;next}; {print 0}' > proc4a
RAN

# whether or not the line has all but one negative (and no 0s)
paste proc3a proc3b proc3c | awk '$1+1==$2 && $3==0 {print 1;next}; {print 0}' > proc4b
RAN

# lines that only increase (with potential 0s) or decrease (without)
paste -d' ' proc3a proc3b | awk '$1==0 || $1==$2 {print 1;next}; {print 0}' > proc4c
RAN

# lines with no 0s
awk '$1==0{print 1;next}; {print 0}' proc3c > proc4d
RAN

# lines with a potentially removable number (1) of 0s
awk '$1==1{print 1;next}; {print 0}' proc3c > proc4e
RAN

# ---EXTRA--- lines that only decrease except one 0
paste proc3a proc3b proc3c | awk '$1+1==$2 && $3==1 {print 1;next}; {print 0}' > proc4cEXTRA
RAN
# ---FIXED replacement for proc4c in removing one 0--- lines that only increase or decrease but may have removable 0s
paste proc3a proc4cEXTRA | awk '$1==0 || $2==1 {print 1;next}; {print 0}' > proc4cALT
RAN


##### 5
# upper bound
cat proc2 | parallel -k --pipe -N1 "tr ' ' '\n' | bound" > proc5a
RAN
# abs lower bound
cat proc2 | parallel -k --pipe -N1 "tr ' ' '\n' | bound -l | sed 's/-//'" > proc5b
RAN


##### 6
# abs bound is 3 or less
paste -d'\n' proc5a proc5b | parallel -k --pipe -N2 "bound | sed 's/-//' | awk '\$1 < 4 {print 1;next}; {print 0}'" > proc6a
RAN

# ---EXTRA--- count the size faults
cat proc2 | parallel -k --pipe -N1 "tr ' ' '\n' | awk '\$1>3 || \$1+0<-3' | wc -l" > proc6a_count
RAN
cat proc6a_count

# just the sequences that need to remove a negative
paste proc4a proc2 | awk '/^1/' | cut -f2 > proc6b
wc -l proc6b
37 proc6b
# index of offending interval in proc6b
cat proc6b | parallel -k --pipe -N1 'tr " " "\n" | awk "/-/ {print NR}"' > proc6b_index
RAN

# just the sequences that need to remove a positive
paste proc4b proc2 | awk '/^1/' | cut -d'	' -f2- > proc6c
wc -l proc6c
39 proc6c
# index of offending interval in proc6c
cat proc6c | parallel -k --pipe -N1 'tr " " "\n" | awk "\$1>0 {print NR}"' > proc6c_index
RAN


##### 7
# remove the last or first number in sequences that need to remove it, also double print them
cat proc6b proc6c > proc6both
cat proc6b_index proc6c_index > proc6both_index
paste -d' ' proc6both_index proc6both | awk '$1==1' | cut -d ' ' -f3- | awk '{print $0; print $0}' > proc7a
RAN
paste -d' ' proc6both_index proc6both | awk '$1==NF-1' | cut -d ' ' -f2- | sed 's/ $//; s/\S*$//' | awk '{print $0; print $0}' > proc7b

# create both options for combining consecutive intervals in sequences that need a middle interval removed
# set up for second pass, second field is a leftover:
paste -d' ' proc6both_index proc6both | awk '$1>1 && $1<NF-1 {print $1+1,$0; print $1+2,$0}' > proc7c_partial
# second pass
cat proc7c_partial | parallel -k --pipe -N1 "tr ' ' '\n' | awk 'NR==1{i=\$1;next}; NR<3{next}; {print \$1}; NR==i{print \"+\"}' | sed -z 's/\n+\n/+/' | bc | tr '\n' ' '; echo" > proc7c



##### 7, but fixed

paste -d' ' proc6both_index proc6both | awk '{print $1+1,$0; print $1+2,$0}' > proc7mk2_partial
# second pass
cat proc7mk2_partial | parallel -k --pipe -N1 "tr ' ' '\n' | awk 'NR==1{i=\$1;next};NR<3{next};i>2||NR>3{print \$1};NR==i{print \"+\"}' | sed -z 's/\n+\n/+/; s/\n[^\n]*+\n/\n/' | bc | tr '\n' ' '; echo" > proc7mk2



##### 8
cat proc7a proc7b proc7c > proc8
RAN
#the new way
cat proc7mk2 > proc8

# 1 for no 0s
cat proc8 | awk '/\<0/{print 0;next}{print 1}' > proc8z
RAN
# count negative signs (found a better way :D)
cat proc8 | sed 's/[^-]//g' | awk '{print length}' > proc8neg
RAN
# 1 for no 0s or direction faults
paste proc8z proc8neg proc8 | awk '$1 && ($2==0 || $2==NF-2){print 1;next}{print 0}' > proc8faultless
RAN

# upper bound
cat proc8 | parallel -k --pipe -N1 "tr ' ' '\n' | bound" > proc8up
RAN
# abs lower bound
cat proc8 | parallel -k --pipe -N1 "tr ' ' '\n' | bound -l | sed 's/-//'" > proc8low
RAN


##### 9
# verified good sequences, still in pairs though
paste proc8faultless proc8up proc8low | awk '$1 && $2<4 && $3<4{print 1;next}{print 0}' > proc9



##### 10
# like win condition 1 but with exactly one size fault
paste proc4c proc4d proc6a_count proc2 | awk '$1 && $2 && $3==1' | cut -f4 > proc10a
RAN

# I don't need the sign any more, as long as the fault is at the start or end the sequence is good
cat proc10a | sed 's/-//g' | awk '$1>3 || $NF>3' > proc10b
RAN


paste proc4c proc4d proc6a_count | awk '$1 && $2 && $3==1{print 1;next}{print 0}' > proc10x


##### RESULTS
# all correct sequences that dont need removals
paste -d'*' proc4c proc4d proc6a | bc | numsum
639

# sequences that only need to remove a 0 but are otherwise fine
paste -d'*' proc4cALT proc4e proc6a | bc | numsum
10

# either or both sequences in a pair from proc9 means 1 good sequence
cat proc9 | paste - - | grep 1 | wc -l
12


echo 639+10+9 | bc
658
FIRST TRY WAS WRONG >o<

# sequences with no direction faults and a single size fault at the edge
wc -l proc10b
13 proc10b
10 proc10b

echo 639+10+9+10 | bc
668
TOO LOW AGAIN????
oh just missed a regex g

echo 639+10+9+13 | bc
671
TOO LOW, UGH SOMETHING ELSE MUST BE BROKEN

echo 639+10+12+13 | bc
674
GOLD STAR GET

